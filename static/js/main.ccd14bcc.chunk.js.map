{"version":3,"sources":["component/Card.js","component/Wrapper.js","component/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","image","onClick","handleClick","id","Wrapper","children","Navbar","message","score","bestScore","correctClicks","App","state","cards","cardClicked","console","log","matchedCard","filter","card","clicked","i","length","sort","a","b","Math","random","setState","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2hEAgBeA,G,YAdF,SAAAC,GAAK,OAEd,yBAAKC,UAAU,iBAEf,yBAAKA,UAAU,eAEd,yBAAKA,UAAU,QAAQC,IAAKF,EAAMG,MAAOC,QAAS,kBAAIJ,EAAMK,YAAYL,EAAMM,WCIpEC,EAVC,SAAAP,GAAK,OAEjB,yBAAKC,UAAU,kBAGbD,EAAMQ,WCWGC,G,MAhBA,SAAAT,GAAK,OAEhB,yBAAKC,UAAU,UAEf,4BACA,wBAAIA,UAAU,SAAd,YACA,4BAAKD,EAAMU,SAAW,aAAtB,KACA,sCAAYV,EAAMW,MAAlB,S,OCAAC,EAAU,EACVC,EAAc,EACdH,EAAQ,GAgGGI,E,2MA7FbC,MAAM,CAEJC,QACAH,gBACAD,YACAF,W,EAKJO,YAAa,SAAAX,GACXY,QAAQC,IAAI,gBACb,IAAMH,EAAM,EAAKD,MAAMC,MACjBI,EAAaJ,EAAMK,QAAO,SAAAC,GAAI,OAClCA,EAAKhB,KAAKA,KACb,IAA6B,IAAzBc,EAAY,GAAGG,SAAmBV,EAAc,GAClDO,EAAY,GAAGG,SAAQ,EACvBV,IACAH,EAAQ,kBAEL,IAA4B,IAAzBU,EAAY,GAAGG,SAAmC,KAAhBV,EAAmB,CACzDA,EAAcD,IACfA,EAAU,IACVC,EAAc,EACdH,EAAQ,6CAER,IAAK,IAAIc,EAAI,EAAIA,EAAIR,EAAMS,OAASD,IACnCR,EAAMQ,GAAGD,SAAU,OAIlB,IAA4B,IAAzBH,EAAY,GAAGG,QACtB,CACKV,EAAcD,IAClBA,EAAUC,GAEVA,EAAc,EACdH,EAAQ,wBACR,IAAK,IAAIc,EAAI,EAAIA,EAAIR,EAAMS,OAASD,IACnCR,EAAMQ,GAAGD,SAAU,EAIrBP,EAAMU,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAE5C,EAAKC,SAAS,CAAEf,UAChB,EAAKe,SAAS,CAAClB,kBACf,EAAKkB,SAAS,CAACrB,YACf,EAAKqB,SAAS,CAACnB,e,wEAoBL,IAAD,OAEN,OACE,6BACA,kBAAC,EAAD,CAAQD,MAAOqB,KAAKjB,MAAMF,cAAeD,UAAWoB,KAAKjB,MAAMH,UAAWF,QAASsB,KAAKjB,MAAML,UAC9F,kBAAC,EAAD,KAEE,yBAAKT,UAAU,OAChB+B,KAAKjB,MAAMC,MAAMiB,KAAI,SAAAX,GAAI,OACxB,kBAAC,EAAD,CAAMjB,YAAa,EAAKY,YAAaiB,IAAKZ,EAAKhB,GAAIA,GAAIgB,EAAKhB,GAAIH,MAAOmB,EAAKnB,kB,GA/ElEgC,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ccd14bcc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\nconst Card = props=>(\r\n\r\n    <div className=\"card col-sm-3\"> \r\n\r\n    <div className=\"image-block\">\r\n\r\n     <img className=\"image\" src={props.image} onClick={()=>props.handleClick(props.id)} />               \r\n    </div>\r\n\r\n\r\n\r\n    </div>\r\n)  \r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nconst Wrapper = props=>(\r\n\r\n    <div className=\"container wrap\"> \r\n\r\n    \r\n     {props.children}\r\n\r\n    </div>\r\n)  \r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Navbar.css\";\r\nconst Navbar = props=>(\r\n\r\n    <nav className=\"navbar\"> \r\n     \r\n    <ul>\r\n    <li className=\"brand\">Click It</li>\r\n    <li>{props.message || \"lests play\"} </li>\r\n    <li>Score: {props.score} </li>\r\n    </ul>\r\n   \r\n\r\n\r\n\r\n    </nav>\r\n)  \r\n\r\nexport default Navbar;","\nimport React, { Component } from \"react\";\n\nimport './App.css';\nimport Card from './component/Card'\nimport Wrapper from './component/Wrapper'\nimport Navbar from './component/Navbar'\nimport cards from './cards.json'\n\nlet bestScore=0;\nlet correctClicks=0;\nlet message=\"\"\nclass App extends Component {\n\n  state={\n\n    cards,\n    correctClicks,\n    bestScore,\n    message\n  }\n\n\n\ncardClicked= id=>{\n  console.log(\"just clicked\")\n const cards=this.state.cards\n const matchedCard= cards.filter(card=>\n   card.id===id)\nif (matchedCard[0].clicked===false && correctClicks<11){\n  matchedCard[0].clicked=true\n  correctClicks++\n  message=\"Good Guess\"\n}\nelse if(matchedCard[0].clicked===false && correctClicks===11){\nif (correctClicks>bestScore)\n   bestScore=12\n   correctClicks=0\n   message=\"Nice Job you guessed it, let's do it again\"\n\n   for (let i = 0 ; i < cards.length ; i++){\n    cards[i].clicked = false;\n}\n}\n\nelse if(matchedCard[0].clicked===true )\n {\n  if (correctClicks>bestScore)\n  bestScore=correctClicks\n\n  correctClicks=0\n  message=\"Wrong guess Try Again\"\n  for (let i = 0 ; i < cards.length ; i++){\n   cards[i].clicked = false;\n}\n }\n\n cards.sort(function(a, b){return 0.5 - Math.random()});\n\n this.setState({ cards});\n this.setState({correctClicks});\n this.setState({message});\n this.setState({bestScore});\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  render(){\n\n    return(\n      <div>\n      <Navbar score={this.state.correctClicks} bestScore={this.state.bestScore} message={this.state.message}/>\n      <Wrapper>\n        \n        <div className=\"row\">\n      {this.state.cards.map(card=>(\n        <Card handleClick={this.cardClicked} key={card.id} id={card.id} image={card.image}/>\n\n      )\n\n      )}\n      \n      </div>\n      </Wrapper>\n      </div>\n    )\n\n\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}